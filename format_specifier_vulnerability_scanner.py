import re
import sys

format_string_patterns = [
    r'printf\s*\(\s*[^,]\s,\s*[^)]*\)',
    r'sprintf\s*\(\s*[^,]\s,\s*[^)]*\)',
    r'fprintf\s*\(\s*[^,]\s,\s*[^)]*\)',
    r'vprintf\s*\(\s*[^,]\s,\s*[^)]*\)',
    r'vsprintf\s*\(\s*[^,]\s,\s*[^)]*\)',
    r'vfprintf\s*\(\s*[^,]\s,\s*[^)]*\)',
    r'(\%[diouxXpn])\s*\(\s*[^,]\s,\s*[^)]*\)',
]
dangerous_input_patterns = [
    r'gets\s*\(',
    r'scanf\s*\(',
    r'fscanf\s*\(',
    r'strcpy\s*\(',
    r'strcat\s*\(',
    r'strncpy\s*\(',
    r'strncat\s*\(',
    r'Scanner\s*\(',
    r'eval\s*\(',
    r'document\.write\s*\(',
]
unsafe_cast_patterns = [
    r'\(void\s*\\)\s',
    r'\(int\s*\)\s*',
    r'\(char\s*\\)\s',
    r'\(float\s*\)\s*',
]
exception_handling_patterns = [
    r'try\s*\{',
    r'catch\s*\(',
    r'throw\s*\(',
]


def scan_for_vulnerabilities(file_path):
    with open(file_path, 'r') as file:
        code = file.read()
    vulnerabilities = []
    for pattern in format_string_patterns:
        matches = re.findall(pattern, code)
        if matches:
            vulnerabilities.append(f"Potential Format String Vulnerability found: {matches}")
    for pattern in dangerous_input_patterns:
        matches = re.findall(pattern, code)
        if matches:
            vulnerabilities.append(f"Dangerous function call detected: {matches}")
    for pattern in unsafe_cast_patterns:
        matches = re.findall(pattern, code)
        if matches:
            vulnerabilities.append(f"Unsafe type casting detected: {matches}")
    for pattern in exception_handling_patterns:
        matches = re.findall(pattern, code)
        if matches:
            vulnerabilities.append(f"Improper exception handling detected: {matches}")
    return vulnerabilities


if len(sys.argv) != 2:
    print("Usage: py format_specifier_vulnerability_scanner.py <testcase_filename>")
    sys.exit(1)
file_path = sys.argv[1]

try:
    vulnerabilities = scan_for_vulnerabilities(file_path)
    if vulnerabilities:
        print("\nVulnerabilities Found:")
        for vuln in vulnerabilities:
            print(f" - {vuln}")
    else:
        print("\nNo vulnerabilities found.")

except Exception as e:
    print(f"Error scanning file: {e}")
import re

def analyze_file(filename):
    vulnerabilities = []
    try:
        with open(filename, "r") as file:
            code = file.read()
            
            # Check for potential integer underflow
            underflow_matches = re.findall(r"\bunsigned int\s+\w+\s*=\s*-?\d+;", code)
            if underflow_matches:
                vulnerabilities.append(f"Potential underflow: {underflow_matches}")
            
            # Check for potential integer overflow
            overflow_matches = re.findall(r"\bint\s+\w+\s*=\s*\d+;.*?\w+\s*[+\-*/]=\s*\d+;", code, re.DOTALL)
            if overflow_matches:
                vulnerabilities.append(f"Potential overflow: {overflow_matches}")
            
            # Check for unsafe type casting
            type_casting_matches = re.findall(r"\(\s*int\s*\)\s*\w+;", code)
            if type_casting_matches:
                vulnerabilities.append(f"Unsafe type casting: {type_casting_matches}")
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        return []

    return vulnerabilities

if __name__ == "__main__":
    filename = input("Enter the C/C++ file to analyze: ")
    vulnerabilities = analyze_file(filename)
    
    if vulnerabilities:
        print(f"\nVulnerabilities found in {filename}:")
        for vulnerability in vulnerabilities:
            print(vulnerability)
    else:
        print(f"\nNo vulnerabilities found in {filename}.")

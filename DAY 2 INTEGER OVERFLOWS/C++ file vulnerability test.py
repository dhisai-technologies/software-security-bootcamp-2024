import re

def read_cpp_file(file_path):
    """Reads the content of a C++ file."""
    with open(file_path, 'r') as file:
        return file.readlines()

def detect_vulnerabilities(lines):
    """Detects integer-related vulnerabilities in the C++ code."""
    vulnerabilities = []
    
    patterns = {
        "integer_overflow": r"(\w+\s*=\s*\w+\s*\+\s*\w+;)",
        "integer_underflow": r"(\w+\s*=\s*\w+\s*-\s*\w+;)",
        "unsafe_type_casting": r"\((int|short|long|unsigned)\)\s*\w+",
        "implicit_conversion": r"(\w+\s*=\s*\(\s*\w+\s*\)\s*\w+;)",
    }
    
    for line_num, line in enumerate(lines, start=1):
        for vuln_type, pattern in patterns.items():
            if re.search(pattern, line):
                vulnerabilities.append((line_num, vuln_type, line.strip()))
    
    return vulnerabilities

def display_vulnerabilities(vulnerabilities):
    """Displays detected vulnerabilities."""
    if not vulnerabilities:
        print("No integer-related vulnerabilities found.")
        return
    
    print("Detected Vulnerabilities:")
    for line_num, vuln_type, code in vulnerabilities:
        print(f"Line {line_num}: {vuln_type}")
        print(f"  Code: {code}")

if __name__ == "__main__":
    
    cpp_file_path = "test.cpp"
    
    try:
        lines = read_cpp_file(cpp_file_path)
        vulnerabilities = detect_vulnerabilities(lines)
        display_vulnerabilities(vulnerabilities)
    except FileNotFoundError:
        print(f"File not found: {cpp_file_path}")
